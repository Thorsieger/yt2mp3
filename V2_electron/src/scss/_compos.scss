$shadow-map: (
  df: (
    0 1px 3px 0 rgba($color-blue-ribbon, 0.1),
    0 1px 2px 0 rgba($color-blue-ribbon, 0.06),
  ),
  md: (
    0 4px 6px -1px rgba($color-blue-ribbon, 0.1),
    0 2px 4px -1px rgba($color-blue-ribbon, 0.06),
  ),
  lg: (
    0px 0.5rem 0.8rem rgba($color-blue-ribbon, 0.1),
  ),
  xl: (
    0 20px 25px -5px rgba($color-blue-ribbon, 0.1),
    0 10px 10px -5px rgba($color-blue-ribbon, 0.04),
  ),
);
@mixin box-shadows($property: 'box-shadow') {
  @each $name, $hex in $shadow-map {
    &-#{$name} {
      #{$property}: $hex;
    }
  }
}

.shadow {
  @include box-shadows();
}

// Other

.p25 {
  padding: 25px;
}

// text
.tac {
  text-align: center;
}
.bold {
  font-weight: bold;
}
.p {
  &-small {
    font-size: var(--font-size);
  }
}
.lh {
  &-large {
    line-height: 1.5;
  }
}
.tl {
  font-style: italic;
}

//  Margins
.mx-auto {
  margin-left: auto;
  margin-right: auto;
}

$spacer: 1rem;
$spacers: (
  0: 0,
  1: (
    $spacer * 0.5,
  ),
  2: (
    $spacer * 1,
  ),
  3: $spacer * 1.5,
  4: (
    $spacer * 2,
  ),
);

$xy-border: (
  top: t,
  right: r,
  bottom: b,
  left: l,
);
// set key value pairs for margin and padding
@each $prop, $letter in (margin: m, padding: p) {
  // loop through top, right, bottom, and left
  @each $direction, $d in $xy-border {
    // loop through the spacers we've set
    @each $unit, $rem in $spacers {
      .#{$letter}#{$d}#{$unit} {
        #{$prop}-#{$direction}: #{$rem};
      }
    }
  }
}

$max: 4;
$offset: 1;
$unit: 'rem'; // Feel free to change the unit.
@mixin list-loop($className, $styleName) {
  $i: 0;
  @while $i <= $max {
    #{$className + $i} {
      #{$styleName}: #{$i + $unit};
    }
    $i: $i + $offset;
  }
}

@include list-loop('.p', 'padding');

.op {
  &-light {
    opacity: 0.7;
  }
}
// tested
// Justify
.jcc {
  justify-content: center;
}
.jcsb {
  justify-content: space-between;
}
.jcfe {
  justify-content: flex-end;
}
.aic {
  align-items: center;
}

//  Display
.dib {
  display: inline-block;
}

.block {
  display: block !important;
}

.flex {
  display: flex;
}
a {
  text-decoration: none;
}
.dnone {
  display: none;
}

// Widths

.w {
  &-large {
    width: 80%;
  }
  &-middle {
    width: 60%;
  }
  &-small {
    width: 50%;
  }
}

.bg {
  &-w {
    display: table;
    background: #f6f9ff;
    padding: 12px;
    font-size: 14px;
    border-radius: 5px;
    margin-top: 20px;
    p {
      margin-bottom: 0;
      color: #222;
    }
  }
}
//  Other
.flex1 {
  flex: 1;
}

.fcolumn {
  flex-direction: column;
}

.relative {
  position: relative;
}

// z-indexes
.z {
  &-priority {
    z-index: 99;
  }
  &-main {
    z-index: 2;
  }
}
// Transition & Animations
.tr25 {
  transition: 0.15s ease;
}

.hidden {
  visibility: hidden;
  opacity: 0;
  transform: translate(-50%, -40%);
}
.visible {
  opacity: 1;
  visibility: visible;
  transform: translate(-50%, -50%);
}

.bg {
  position: absolute;
  pointer-events: none;
  left: 0;
  top: 0;
  z-index: 0;
  width: 100%;
  height: 100%;
  h1 {
    font-size: 280px;
    position: absolute;
    background-image: linear-gradient(
      to top,
      rgba(255, 255, 255, 0) 25%,
      rgba(#dce3f2, 1) 85%
    );
    background-clip: text;
    -webkit-background-clip: text;
    -webkit-text-fill-color: transparent;
    top: 40%;
    left: 50%;
    transform: translate(-50%, -60%);
    font-weight: 900;
  }
}
